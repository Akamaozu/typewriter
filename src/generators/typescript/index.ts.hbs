/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

/**
 * Context is a dictionary of extra information that provides useful context about a datapoint.
 * @see {@link https://segment.com/docs/spec/common/#context}
 */
export interface Context {
	active?: boolean
	app?: {
		name?: string
		version?: string
		build?: string
	}
	campaign?: {
		name?: string
		source?: string
		medium?: string
		term?: string
		content?: string
	}
	device?: {
		id?: string
		manufacturer?: string
		model?: string
		name?: string
		type?: string
		version?: string
	}
	ip?: string
	locale?: string
	location?: {
		city?: string
		country?: string
		latitude?: string
		longitude?: string
		region?: string
		speed?: string
	}
	network?: {
		bluetooth?: string
		carrier?: string
		cellular?: string
		wifi?: string
	}
	os?: {
		name?: string
		version?: string
	}
	page?: {
		hash?: string
		path?: string
		referrer?: string
		search?: string
		title?: string
		url?: string
	}
	referrer?: {
		type?: string
		name?: string
		url?: string
		link?: string
	}
	screen?: {
		density?: string
		height?: string
		width?: string
	}
	timezone?: string
	groupId?: string
	traits?: {
		[key: string]: any
	}
	userAgent?: string
	[key: string]: any
}
export type AnalyticsJSCallback = () => void

/** A dictionary of options. For example, enable or disable specific destinations for the call. */
export interface SegmentOptions {
	/**
	 * Selectivly filter destinations. By default all destinations are enabled.
	 * https://segment.com/docs/sources/website/analytics.js/#selecting-destinations
	 */
	integrations?: {
		All?: boolean
		AppsFlyer?: {
			appsFlyerId: string
		}
		[key: string]: boolean | { [key: string]: string } | undefined
	}
	/**
	 * A dictionary of extra context to attach to the call.
	 * https://segment.com/docs/spec/common/#context
	 */
	context?: Context
}
{{#each interfaces}}

{{#if description}}
/**
 * {{description}}
 */
{{/if}}
interface {{name}} {
	{{#each properties}}
	{{#if description}}
	/**
	 * {{description}}
	 */
	{{/if}}
	'{{name}}'{{#unless isRequired}}?{{/unless}}: {{type}}
	{{/each}}
}
{{/each}}

// From https://github.com/epoberezkin/ajv/blob/0c31c1e2a81e315511c60a0dd7420a72cb181e61/lib/ajv.d.ts#L279
export interface AjvErrorObject {
	keyword: string
	dataPath: string
	schemaPath: string
	params: object
	message: string
	propertyName?: string
	parentSchema?: object
	data?: any
}

// An invalid event with its associated collection of validation errors.
export interface InvalidEvent {
	eventName: string
	validationErrors: AjvErrorObject[]
}

// Options to customize the runtime behavior of a Typewriter client.
export interface AnalyticsOptions {
	onError?(event: InvalidEvent): void
}

// A minimal interface for Segment's analytics.js.
export interface SegmentAnalytics {
	track: (
		event: string,
		properties?: Record<string, any>,
		options?: SegmentOptions,
		callback?: () => void
	) => void
}

/**
 * Analytics provides a strongly-typed wrapper around Segment Analytics
 * based on your Tracking Plan.
 */
export default class Analytics {
	private analytics: SegmentAnalytics

	/**
	 * Instantiate a wrapper around an analytics library instance
	 * @param {Analytics} analytics The analytics.js library to wrap
	 * @param {AnalyticsOptions} [options] Optional configuration of the Typewriter client
	 * @param {function} [options.onError] Error handler fired when run-time validation errors
	 *     are raised.
	 */
	public constructor(
		analytics: SegmentAnalytics,
		options: AnalyticsOptions = {}
	) {
		this.analytics = analytics || { track: () => null }
	}

	private static withTypewriterContext(options: SegmentOptions = {}) {
		return {
			...options,
			context: {
				...(options.context || {}),
				typewriter: {
					language: 'ts',
					version: '7.0.0',
				},
			},
		}
	}
	{{#each trackCalls}}

	{{#if description}}
	/**
	 * {{description}}
	 */
	{{/if}}
	public {{functionName}}(
		props: {{propsType}},
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'{{eventName}}',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}
	{{/each}}
}
