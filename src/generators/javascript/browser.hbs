/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

declare global {
  interface Window {
    analytics?: Segment.AnalyticsJS
  }
}

/**
 * Type definitions for Segment's analytics.js.
 */
namespace Segment {
	/** A minimal interface for Segment's analytics.js. */
	export interface AnalyticsJS {
		track: (
			event: string,
			properties?: Record<string, any>,
			options?: Options,
			callback?: Callback
		) => void
	}

	/** A dictionary of options. For example, enable or disable specific destinations for the call. */
	export interface Options {
		/**
		* Selectivly filter destinations. By default all destinations are enabled.
		* https://segment.com/docs/sources/website/analytics.js/#selecting-destinations
		*/
		integrations?: {
			All?: boolean
			AppsFlyer?: {
				appsFlyerId: string
			}
			[key: string]: boolean | { [key: string]: string } | undefined
		}
		/**
		* A dictionary of extra context to attach to the call.
		* https://segment.com/docs/spec/common/#context
		*/
		context?: Context
	}

	/**
	 * Context is a dictionary of extra information that provides useful context about a datapoint.
	 * @see {@link https://segment.com/docs/spec/common/#context}
	 */
	export interface Context extends Record<string, any> {
		active?: boolean
		app?: {
			name?: string
			version?: string
			build?: string
		}
		campaign?: {
			name?: string
			source?: string
			medium?: string
			term?: string
			content?: string
		}
		device?: {
			id?: string
			manufacturer?: string
			model?: string
			name?: string
			type?: string
			version?: string
		}
		ip?: string
		locale?: string
		location?: {
			city?: string
			country?: string
			latitude?: string
			longitude?: string
			region?: string
			speed?: string
		}
		network?: {
			bluetooth?: string
			carrier?: string
			cellular?: string
			wifi?: string
		}
		os?: {
			name?: string
			version?: string
		}
		page?: {
			hash?: string
			path?: string
			referrer?: string
			search?: string
			title?: string
			url?: string
		}
		referrer?: {
			type?: string
			name?: string
			url?: string
			link?: string
		}
		screen?: {
			density?: string
			height?: string
			width?: string
		}
		timezone?: string
		groupId?: string
		traits?: Record<string, any>
		userAgent?: string
	}

	export type Callback = () => void
}

/**
 * Type definitions for run-time validation errors.
 */
namespace RuntimeValidation {
	/** An invalid event with its associated collection of validation errors. */
	export interface InvalidEvent {
		eventName: string
		validationErrors: ValidationError[]
	}

	/**
	 * Validation error raised by AJV.js.
	 * See: https://github.com/epoberezkin/ajv
	 * Specifically: https://github.com/epoberezkin/ajv/blob/0c31c1e2a81e315511c60a0dd7420a72cb181e61/lib/ajv.d.ts#L279
	 */
	export interface ValidationError {
		keyword: string
		dataPath: string
		schemaPath: string
		params: object
		message: string
		propertyName?: string
		parentSchema?: object
		data?: any
	}
}
{{#each interfaces}}

{{#if description}}
/**
 * {{description}}
 */
{{/if}}
interface {{name}} {
	{{#each properties}}
	{{#if description}}
	/**
	 * {{description}}
	 */
	{{/if}}
	'{{name}}'{{#unless isRequired}}?{{/unless}}: {{type}}
	{{/each}}
}
{{/each}}

// TODO:
// Options to customize the runtime behavior of a Typewriter client.
// export interface AnalyticsOptions {
//	onError?(event: InvalidEvent): void
// }

// Helper to attach metadata on Typewriter to outbound requests.
// This is used for attribution and debugging by the Segment team.
function withTypewriterContext(options: Segment.Options = {}): Segment.Options {
	return {
		...options,
		context: {
			...(options.context || {}),
			typewriter: {
				language: 'ts',
				version: '7.0.0',
			},
		},
	}
}

{{#each trackCalls}}

{{#if description}}
/**
	* {{description}}
	*/
{{/if}}
export function {{functionName}}(
	props: {{type}},
	options?: Segment.Options,
	callback?: Segment.Callback
): void {
  if (window.analytics) {
    window.analytics.track(
      '{{eventName}}',
      props || {},
      withTypewriterContext(options),
      callback
    )
  }
}
{{/each}}
