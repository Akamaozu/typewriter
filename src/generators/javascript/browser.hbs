/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

{{#if isDevelopment}}
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 * 
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv'
{{/if}}
import * as Segment from './segment'

{{#each interfaces}}
{{#if description}}
/**
 * {{description}}
 */
{{/if}}
export interface {{name}} {
	{{#each properties}}
	{{#if description}}
	/**
	 * {{description}}
	 */
	{{/if}}
	'{{name}}'{{#unless isRequired}}?{{/unless}}: {{type}}
	{{/each}}
}
{{/each}}

/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
	/**
	 * Handler fired when if an event does not match its spec. Returns a boolean
	 * indicating if the message should still be sent to Segment. This handler
	 * does not fire in production mode, because it requires inlining the full
	 * JSON Schema spec.
	 *
	 * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
	 * if a message does not match the spec. Otherwise, errors will be logged to stderr.
	 * Also by default, invalid messages will be dropped.
	 */
	onValidationError?: ValidationErrorHandler
}

export type ValidationErrorHandler = (
	message: Record<string, any>,
	{{!-- Note: we don't want to require an import of ajv in production just for this type definition. --}}
	validationErrors: {{#if isDevelopment}}Ajv.ErrorObject{{else}}any{{/if}}[]
) => boolean

{{#if isDevelopment}}
export const defaultValidationErrorHandler: ValidationErrorHandler = (message, validationErrors) => {
	const msg = JSON.stringify({
		type: 'Typewriter JSON Schema Validation Error',
		description:
			`You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
			'Tracking Plan spec. Your analytics call will continue to fire in production.',
		errors: validationErrors,
	}, undefined, 2)

	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	console.error(msg)

	return false
}

let onValidationError = defaultValidationErrorHandler
{{/if}}

/**
 * Update the run-time configuration of this Typewriter client.
 * Note that this is currently a no-op for production builds.
 */
export function setTypewriterOptions(options: TypewriterOptions) {
	{{#if isDevelopment}}
	onValidationError = options.onValidationError || onValidationError
	{{/if}}
}

{{#if isDevelopment}}
/**
	* Validates a message against a JSON Schema using Ajv. If the message
	* is invalid, the `onValidationError` handler will be called.
	* Returns true if the message should be sent on to Segment, and false otherwise.
	*/
function matchesSchema(
	message: Record<string, any>,
	schema: object
): boolean {
	const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true })
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))

	if (!ajv.validate(schema, message) && ajv.errors) {
		return onValidationError(message, ajv.errors)
	}

	return true
}
{{/if}}

/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(options: Segment.Options = {}): Segment.Options {
	return {
		...options,
		context: {
			...(options.context || {}),
			typewriter: {
				language: 'ts',
				version: '7.0.0',
			},
		},
	}
}

{{#each tracks}}
{{#if description}}
/**
 * {{description}}
 */
{{/if}}
export function {{functionName}}(
	props: {{type}},
	options?: Segment.Options,
	callback?: Segment.Callback
): void {
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	const message = {
		event: '{{eventName}}',
		properties: props || {},
		options,
	}
	if (!matchesSchema(message, schema)) {
		return
	}
	{{/if}}

	if (window.analytics) {
		window.analytics.track(
			'{{eventName}}',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}

{{/each}}
