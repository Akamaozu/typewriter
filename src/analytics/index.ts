/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv'
import * as Segment from './segment'

export interface Client {
	language?: string
	sdk?: string
}
export interface TrackingPlan {
	id?: string
	workspace_slug?: string
}
export interface CommandRun {
	/**
	 * Metadata about the client that typewriter is generating.
	 */
	client?: Client
	/**
	 * The command name that was started.
	 */
	command: string
	/**
	 * The time taken to execute this command, in ms.
	 */
	duration: number
	/**
	 * Whether or not typewriter is currently running in a CI environment or not.
	 */
	is_ci?: boolean
	/**
	 * Where the API token was fetched from.
	 */
	token_method?: string
	/**
	 * Metadata about the Tracking Plan that typewriter was fired on.
	 */
	tracking_plan?: TrackingPlan
}
export interface Client1 {
	language?: string
	sdk?: string
}
export interface TrackingPlan1 {
	id?: string
	workspace_slug?: string
}
export interface ErrorFired {
	/**
	 * Metadata about the client that typewriter is generating.
	 */
	client?: Client1
	/**
	 * The command name that was started.
	 */
	command?: string
	/**
	 * The full error itself.
	 */
	error: Record<string, any>
	/**
	 * The minimal error string itself.
	 */
	error_string: string
	/**
	 * Whether or not typewriter is currently running in a CI environment or not.
	 */
	is_ci?: boolean
	/**
	 * Where the API token was fetched from.
	 */
	token_method?: string
	/**
	 * Metadata about the Tracking Plan that typewriter was fired on.
	 */
	tracking_plan?: TrackingPlan1
	/**
	 * Whether or not this error was an expected (and therefore, properly handled) error.
	 */
	unexpected: boolean
}

export type ViolationHandler = (
	message: Segment.TrackMessage<Record<string, any>>,
	violations: Ajv.ErrorObject[]
) => void

export const defaultValidationErrorHandler: ViolationHandler = (
	message,
	violations
) => {
	const msg = JSON.stringify(
		{
			type: 'Typewriter JSON Schema Validation Error',
			description:
				`You made an analytics call (${
					message.event
				}) using Typewriter that doesn't match the ` + 'Tracking Plan spec.',
			errors: violations,
		},
		undefined,
		2
	)

	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	console.warn(msg)
}

let onViolation = defaultValidationErrorHandler

const missingAnalyticsNodeError = new Error(`You must set an analytics-node instance:

>	const SegmentAnalytics = require('analytics-node')
>	const { setTypewriterOptions } = require('./analytics')
>
>	const analytics = new SegmentAnalytics('SEGMENT_WRITE_KEY')
>	setTypewriterOptions({
>		analytics: analytics,
>	})

For more information on analytics-node, see: https://segment.com/docs/sources/server/node/quickstart/
`)

let analytics: () => Segment.AnalyticsNode | undefined = () => {
	throw missingAnalyticsNodeError
}

/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
	/**
	 * Underlying analytics instance where analytics calls are forwarded on to.
	 */
	analytics: Segment.AnalyticsNode
	/**
	 * Handler fired when if an event does not match its spec. Returns a boolean
	 * indicating if the message should still be sent to Segment. This handler
	 * does not fire in production mode, because it requires inlining the full
	 * JSON Schema spec for each event in your Tracking Plan.
	 *
	 * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
	 * if a message does not match the spec. Otherwise, errors will be logged to stderr.
	 */
	onViolation?: ViolationHandler
}

/**
 * Updates the run-time configuration of this Typewriter client.
 * This function must be called with a configured analytics-node instance before firing
 * any analytics calls, or else a `missingAnalyticsNodeError` error will be thrown.
 */
export function setTypewriterOptions(options: TypewriterOptions) {
	analytics = options.analytics ? () => options.analytics : analytics
	onViolation = options.onViolation || onViolation
}

/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(
	message: Segment.TrackMessage<Record<string, any>>,
	schema: object
) {
	const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true })
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))

	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}

/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext<P, T extends Segment.TrackMessage<P>>(
	message: T
): T {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: 'typescript',
				version: '7.0.0',
			},
		},
	}
}

/**
 * Fired when a CLI command is started.
 */
export function commandRun(
	message: Segment.TrackMessage<CommandRun>,
	callback?: Segment.Callback
): void {
	const msg = withTypewriterContext({
		properties: {},
		...message,
		event: 'Command Run',
	})

	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			properties: {
				properties: {
					client: {
						description:
							'Metadata about the client that typewriter is generating.',
						properties: {
							language: {
								description: '',
								type: 'string',
							},
							sdk: {
								description: '',
								type: 'string',
							},
						},
						required: [],
						type: 'object',
					},
					command: {
						description: 'The command name that was started.',
						type: 'string',
					},
					duration: {
						description: 'The time taken to execute this command, in ms.',
						type: 'integer',
					},
					is_ci: {
						description:
							'Whether or not typewriter is currently running in a CI environment or not.',
						type: 'boolean',
					},
					token_method: {
						description: 'Where the API token was fetched from.',
						pattern: 'tokenCommand|env|file',
						type: 'string',
					},
					tracking_plan: {
						description:
							'Metadata about the Tracking Plan that typewriter was fired on.',
						properties: {
							id: {
								description: '',
								type: 'string',
							},
							workspace_slug: {
								description: '',
								type: 'string',
							},
						},
						required: [],
						type: 'object',
					},
				},
				required: ['command', 'duration'],
				type: 'object',
			},
			traits: {},
		},
		required: ['properties'],
		type: 'object',
		title: 'Command Run',
		description: 'Fired when a CLI command is started.',
	}
	validateAgainstSchema(msg, schema)

	const a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
/**
 * Fired when an error is encountered.
 */
export function errorFired(
	message: Segment.TrackMessage<ErrorFired>,
	callback?: Segment.Callback
): void {
	const msg = withTypewriterContext({
		properties: {},
		...message,
		event: 'Error Fired',
	})

	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			properties: {
				properties: {
					client: {
						description:
							'Metadata about the client that typewriter is generating.',
						properties: {
							language: {
								description: '',
								type: 'string',
							},
							sdk: {
								description: '',
								type: 'string',
							},
						},
						required: [],
						type: 'object',
					},
					command: {
						description: 'The command name that was started.',
						type: 'string',
					},
					error: {
						description: 'The full error itself.',
						type: 'object',
					},
					error_string: {
						description: 'The minimal error string itself.',
						type: 'string',
					},
					is_ci: {
						description:
							'Whether or not typewriter is currently running in a CI environment or not.',
						type: 'boolean',
					},
					token_method: {
						description: 'Where the API token was fetched from.',
						pattern: 'tokenCommand|env|file',
						type: 'string',
					},
					tracking_plan: {
						description:
							'Metadata about the Tracking Plan that typewriter was fired on.',
						properties: {
							id: {
								description: '',
								type: 'string',
							},
							workspace_slug: {
								description: '',
								type: 'string',
							},
						},
						required: [],
						type: 'object',
					},
					unexpected: {
						description:
							'Whether or not this error was an expected (and therefore, properly handled) error.',
						type: 'boolean',
					},
				},
				required: ['error', 'error_string', 'unexpected'],
				type: 'object',
			},
			traits: {},
		},
		required: ['properties'],
		type: 'object',
		title: 'Error Fired',
		description: 'Fired when an error is encountered.',
	}
	validateAgainstSchema(msg, schema)

	const a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
