/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message) {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: 'ts',
				version: '7.0.0',
			},
		},
	}
}
/** Helper to insert an event name into a track call. */
function withEventName(message, eventName) {
	return {
		...message,
		event: eventName,
	}
}
/**
 * Analytics provides a strongly-typed wrapper around Segment Analytics
 * based on your Tracking Plan.
 */
export default class Analytics {
	/**
	 * Instantiate a wrapper around an analytics-node instance.
	 * @param {Segment.AnalyticsNode} analytics The analytics-node library to wrap
	 * @param {AnalyticsOptions} [options] Optional configuration of the Typewriter client
	 * @param {function} [options.onError] Error handler fired when run-time validation errors
	 *     are raised.
	 */
	constructor(analytics, options = {}) {
		this.analytics = analytics || { track: () => null }
	}
	/**
	 * Don't do this.
	 */
	I42TerribleEventName3(message, callback) {
		this.analytics.track(
			withTypewriterContext(
				withEventName(message, '42_--terrible=="event\'++name~!3')
			),
			callback
		)
	}
	/**
	 * This is JSON Schema draft-04 event.
	 */
	draft04Event(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'Draft-04 Event')),
			callback
		)
	}
	/**
	 * This is JSON Schema draft-06 event.
	 */
	draft06Event(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'Draft-06 Event')),
			callback
		)
	}
	/**
	 * This is an empty event.
	 */
	emptyEvent(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'Empty Event')),
			callback
		)
	}
	/**
	 * This event contains all supported variations of properties.
	 */
	exampleEvent(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'Example Event')),
			callback
		)
	}
	/**
	 * checkin != check_in bug
	 */
	checkIn(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'check_in')),
			callback
		)
	}
	/**
	 * checkin != check_in bug
	 */
	checkin(message, callback) {
		this.analytics.track(
			withTypewriterContext(withEventName(message, 'checkin')),
			callback
		)
	}
}
