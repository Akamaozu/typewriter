/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */
let analytics = () => undefined
/**
 * Update the run-time configuration of this Typewriter client.
 */
export function setTypewriterOptions(options) {
	analytics = () => options.analytics || window.analytics
}
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message = {}) {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: 'javascript',
				version: '7.0.0',
			},
		},
	}
}
/**
 * Don't do this.
 *
 * @param {object} props - The analytics properties that will be sent to Segment.
 * @param {any} [props.0000---terrible-property-name~!3] - Really, don't do this.
 * @param {any} [props.identifierId] - Duplicate key error in Android
 * @param {any} [props.identifier_id] - AcronymStyle bug fixed in v5.0.1
 */
export function I42TerribleEventName3(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track(
			'42_--terrible=="event\'++name~!3',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * This is JSON Schema draft-04 event.
 */
export function draft04Event(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track(
			'Draft-04 Event',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * This is JSON Schema draft-06 event.
 */
export function draft06Event(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track(
			'Draft-06 Event',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * This is an empty event.
 */
export function emptyEvent(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track(
			'Empty Event',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * This event contains all supported variations of properties.
 *
 * @param {object} props - The analytics properties that will be sent to Segment.
 * @param {any} [props.optional any] - Optional any property
 * @param {OptionalArray[]} [props.optional array] - Optional array property
 * @param {any[]} [props.optional array (empty)] - Optional array (empty) property
 * @param {boolean} [props.optional boolean] - Optional boolean property
 * @param {number} [props.optional int] - Optional integer property
 * @param {string | null} [props.optional nullable string] -
 * @param {number} [props.optional number] - Optional number property
 * @param {number | string} [props.optional number or string] -
 * @param {OptionalObject} [props.optional object] - Optional object property
 * @param {Record<string, any>} [props.optional object (empty)] - Optional object (empty) property
 * @param {string} [props.optional string] - Optional string property
 * @param {string} [props.optional string regex] - Optional string regex property
 * @param {any} props.required any - Required any property
 * @param {RequiredArray[]} props.required array - Required array property
 * @param {any[]} props.required array (empty) - Required array (empty) property
 * @param {boolean} props.required boolean - Required boolean property
 * @param {number} props.required int - Required integer property
 * @param {string | null} props.required nullable string -
 * @param {number} props.required number - Required number property
 * @param {number | string} props.required number or string -
 * @param {RequiredObject} props.required object - Required object property
 * @param {Record<string, any>} props.required object (empty) - Required object (empty) property
 * @param {string} props.required string - Required string property
 * @param {string} props.required string regex - Required string regex property
 */
export function exampleEvent(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track(
			'Example Event',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * checkin != check_in bug
 */
export function checkIn(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track('check_in', props || {}, withTypewriterContext(options), callback)
	}
}
/**
 * checkin != check_in bug
 */
export function checkin(props, options, callback) {
	const a = analytics()
	if (a) {
		a.track('checkin', props || {}, withTypewriterContext(options), callback)
	}
}
