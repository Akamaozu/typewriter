/**
 *  This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

/**
 * Context is a dictionary of extra information that provides useful context about a datapoint.
 * @see {@link https://segment.com/docs/spec/common/#context}
 */
export interface Context {
	active?: boolean
	app?: {
		name?: string
		version?: string
		build?: string
	}
	campaign?: {
		name?: string
		source?: string
		medium?: string
		term?: string
		content?: string
	}
	device?: {
		id?: string
		manufacturer?: string
		model?: string
		name?: string
		type?: string
		version?: string
	}
	ip?: string
	locale?: string
	location?: {
		city?: string
		country?: string
		latitude?: string
		longitude?: string
		region?: string
		speed?: string
	}
	network?: {
		bluetooth?: string
		carrier?: string
		cellular?: string
		wifi?: string
	}
	os?: {
		name?: string
		version?: string
	}
	page?: {
		hash?: string
		path?: string
		referrer?: string
		search?: string
		title?: string
		url?: string
	}
	referrer?: {
		type?: string
		name?: string
		url?: string
		link?: string
	}
	screen?: {
		density?: string
		height?: string
		width?: string
	}
	timezone?: string
	groupId?: string
	traits?: {
		[key: string]: any
	}
	userAgent?: string
	[key: string]: any
}
export type AnalyticsJSCallback = () => void

/** A dictionary of options. For example, enable or disable specific destinations for the call. */
export interface SegmentOptions {
	/**
	 * Selectivly filter destinations. By default all destinations are enabled.
	 * https://segment.com/docs/sources/website/analytics.js/#selecting-destinations
	 */
	integrations?: {
		All?: boolean
		AppsFlyer?: {
			appsFlyerId: string
		}
		[key: string]: boolean | { [key: string]: string } | undefined
	}
	/**
	 * A dictionary of extra context to attach to the call.
	 * https://segment.com/docs/spec/common/#context
	 */
	context?: Context
}

/**
 * Don't do this.
 */
interface I42terribleeventname3 {
	/**
	 * Really, don't do this.
	 */
	'0000---terrible-property-name~!3'?: any
	/**
	 * Duplicate key error in Android
	 */
	'identifierId'?: any
	/**
	 * AcronymStyle bug fixed in v5.0.1
	 */
	'identifier_id'?: any
}

/**
 * Optional array property
 */
interface Optionalarray {
	/**
	 * Optional sub-property
	 */
	'optional sub-property'?: string
	/**
	 * Required sub-property
	 */
	'required sub-property': string
}

/**
 * Optional object property
 */
interface Optionalobject {
	/**
	 * Optional sub-property
	 */
	'optional sub-property'?: string
	/**
	 * Required sub-property
	 */
	'required sub-property': string
}

/**
 * Required array property
 */
interface Requiredarray {
	/**
	 * Optional sub-property
	 */
	'optional sub-property'?: string
	/**
	 * Required sub-property
	 */
	'required sub-property': string
}

/**
 * Required object property
 */
interface Requiredobject {
	/**
	 * Optional sub-property
	 */
	'optional sub-property'?: string
	/**
	 * Required sub-property
	 */
	'required sub-property': string
}

/**
 * This event contains all supported variations of properties.
 */
interface Exampleevent {
	/**
	 * Optional any property
	 */
	'optional any'?: any
	/**
	 * Optional array property
	 */
	'optional array'?: Optionalarray[]
	/**
	 * Optional array (empty) property
	 */
	'optional array (empty)'?: any[]
	/**
	 * Optional boolean property
	 */
	'optional boolean'?: boolean
	/**
	 * Optional integer property
	 */
	'optional int'?: number
	'optional nullable string'?: string | null
	/**
	 * Optional number property
	 */
	'optional number'?: number
	'optional number or string'?: number | string
	/**
	 * Optional object property
	 */
	'optional object'?: Optionalobject
	/**
	 * Optional object (empty) property
	 */
	'optional object (empty)'?: Record<string, any>
	/**
	 * Optional string property
	 */
	'optional string'?: string
	/**
	 * Optional string regex property
	 */
	'optional string regex'?: string
	/**
	 * Required any property
	 */
	'required any': any
	/**
	 * Required array property
	 */
	'required array': Requiredarray[]
	/**
	 * Required array (empty) property
	 */
	'required array (empty)': any[]
	/**
	 * Required boolean property
	 */
	'required boolean': boolean
	/**
	 * Required integer property
	 */
	'required int': number
	'required nullable string': string | null
	/**
	 * Required number property
	 */
	'required number': number
	'required number or string': number | string
	/**
	 * Required object property
	 */
	'required object': Requiredobject
	/**
	 * Required object (empty) property
	 */
	'required object (empty)': Record<string, any>
	/**
	 * Required string property
	 */
	'required string': string
	/**
	 * Required string regex property
	 */
	'required string regex': string
}

// From https://github.com/epoberezkin/ajv/blob/0c31c1e2a81e315511c60a0dd7420a72cb181e61/lib/ajv.d.ts#L279
export interface AjvErrorObject {
	keyword: string
	dataPath: string
	schemaPath: string
	params: object
	message: string
	propertyName?: string
	parentSchema?: object
	data?: any
}

// An invalid event with its associated collection of validation errors.
export interface InvalidEvent {
	eventName: string
	validationErrors: AjvErrorObject[]
}

// Options to customize the runtime behavior of a Typewriter client.
export interface AnalyticsOptions {
	onError?(event: InvalidEvent): void
}

// A minimal interface for Segment's analytics.js.
export interface SegmentAnalytics {
	track: (
		event: string,
		properties?: Record<string, any>,
		options?: SegmentOptions,
		callback?: () => void
	) => void
}

/**
 * Analytics provides a strongly-typed wrapper around Segment Analytics
 * based on your Tracking Plan.
 */
export default class Analytics {
	private analytics: SegmentAnalytics

	/**
	 * Instantiate a wrapper around an analytics library instance
	 * @param {Analytics} analytics The analytics.js library to wrap
	 * @param {AnalyticsOptions} [options] Optional configuration of the Typewriter client
	 * @param {function} [options.onError] Error handler fired when run-time validation errors
	 *     are raised.
	 */
	public constructor(
		analytics: SegmentAnalytics,
		options: AnalyticsOptions = {}
	) {
		this.analytics = analytics || { track: () => null }
	}

	private static withTypewriterContext(options: SegmentOptions = {}) {
		return {
			...options,
			context: {
				...(options.context || {}),
				typewriter: {
					language: 'ts',
					version: '7.0.0',
				},
			},
		}
	}

	/**
	 * Don't do this.
	 */
	public I42TerribleEventName3(
		props: I42terribleeventname3,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'42_--terrible=="event\'++name~!3',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * This is JSON Schema draft-04 event.
	 */
	public Idraft04Event(
		props: Record<string, any>,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'Draft-04 Event',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * This is JSON Schema draft-06 event.
	 */
	public Idraft06Event(
		props: Record<string, any>,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'Draft-06 Event',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * This is an empty event.
	 */
	public emptyEvent(
		props: Record<string, any>,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'Empty Event',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * This event contains all supported variations of properties.
	 */
	public exampleEvent(
		props: Exampleevent,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'Example Event',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * checkin != check_in bug
	 */
	public checkIn(
		props: Record<string, any>,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'check_in',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}

	/**
	 * checkin != check_in bug
	 */
	public checkin(
		props: Record<string, any>,
		options: SegmentOptions = {},
		callback?: AnalyticsJSCallback
	): void {
		this.analytics.track(
			'checkin',
			props || {},
			Analytics.withTypewriterContext(options),
			callback
		)
	}
}
