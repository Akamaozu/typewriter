/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv'
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * This handler will log a warning message to the console.
 */
export const defaultValidationErrorHandler = (message, violations) => {
	const msg = JSON.stringify(
		{
			type: 'Typewriter JSON Schema Validation Error',
			description:
				`You made an analytics call (${
					message.event
				}) using Typewriter that doesn't match the ` + 'Tracking Plan spec.',
			errors: violations,
		},
		undefined,
		2
	)
	console.warn(msg)
}
let onViolation = defaultValidationErrorHandler
let analytics = () => {
	return window.analytics
}
/**
 * Updates the run-time configuration of this Typewriter client.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
 * 		calls are forwarded on to. Defaults to window.analytics.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setTypewriterOptions(options) {
	analytics = options.analytics
		? () => options.analytics || window.analytics
		: analytics
	onViolation = options.onViolation || onViolation
}
/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(message, schema) {
	const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true })
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))
	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message = {}) {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: 'javascript',
				version: '7.0.0-37',
			},
		},
	}
}
/**
 * @typedef CustomViolationHandler
 * @property {string} `regex property` -
 */
/**
 * @typedef DefaultViolationHandler
 * @property {string} `regex property` -
 */
/**
 * @typedef EveryNullableOptionalType
 * @property {boolean | null} [optional boolean] - Optional boolean property
 * @property {number | null} [optional int] - Optional integer property
 * @property {number | null} [optional number] - Optional number property
 * @property {Record<string, any> | null} [optional object] - Optional object property
 * @property {string | null} [optional string] - Optional string property
 * @property {string | null} [optional string with regex] - Optional string property with a regex conditional
 * @property {any | null} [optional any] - Optional any property
 * @property {any[] | null} [optional array] - Optional array property
 */
/**
 * @typedef EveryNullableRequiredType
 * @property {any | null} `required any` - Required any property
 * @property {any[] | null} `required array` - Required array property
 * @property {boolean | null} `required boolean` - Required boolean property
 * @property {number | null} `required int` - Required integer property
 * @property {number | null} `required number` - Required number property
 * @property {Record<string, any> | null} `required object` - Required object property
 * @property {string | null} `required string` - Required string property
 * @property {string | null} `required string with regex` - Required string property with a regex conditional
 */
/**
 * @typedef EveryOptionalType
 * @property {number} [optional int] - Optional integer property
 * @property {number} [optional number] - Optional number property
 * @property {Record<string, any>} [optional object] - Optional object property
 * @property {string} [optional string] - Optional string property
 * @property {string} [optional string with regex] - Optional string property with a regex conditional
 * @property {any | null} [optional any] - Optional any property
 * @property {any[]} [optional array] - Optional array property
 * @property {boolean} [optional boolean] - Optional boolean property
 */
/**
 * @typedef EveryRequiredType
 * @property {any[]} `required array` - Required array property
 * @property {boolean} `required boolean` - Required boolean property
 * @property {number} `required int` - Required integer property
 * @property {number} `required number` - Required number property
 * @property {Record<string, any>} `required object` - Required object property
 * @property {string} `required string` - Required string property
 * @property {string} `required string with regex` - Required string property with a regex conditional
 * @property {any | null} `required any` - Required any property
 */
/**
 * @typedef UniverseCharactersItemItem
 * @property {string} `name` - The character's name.
 */
/**
 * @typedef NestedArrays
 * @property {UniverseCharactersItemItem[][]} `universeCharacters` - All known characters from each universe.
 */
/**
 * @typedef SubterraneanLab
 * @property {any[]} [jerry\'s memories] -
 * @property {any[]} [morty\'s memories] -
 * @property {string} [summer\'s contingency plan] -
 */
/**
 * @typedef Tunnel
 * @property {SubterraneanLab} `subterranean lab` -
 */
/**
 * @typedef Garage
 * @property {Tunnel} `tunnel` -
 */
/**
 * @typedef NestedObjects
 * @property {Garage} `garage` -
 */
/**
 * @typedef PropertiesCollided
 * @property {string} `Property Collided` -
 * @property {string} `property_collided` -
 */
/**
 * @typedef OccupantsItem
 * @property {string} `name` - The name of this occupant.
 */
/**
 * @typedef Universe
 * @property {OccupantsItem[]} `occupants` - The most important occupants in this universe.
 * @property {string} `name` - The common name of this universe.
 */
/**
 * @typedef PropertyObjectNameCollision1
 * @property {Universe} [universe] -
 */
/**
 * @typedef OccupantsItem1
 * @property {string} `name` - The name of this occupant.
 */
/**
 * @typedef Universe1
 * @property {string} `name` - The common name of this universe.
 * @property {OccupantsItem1[]} `occupants` - The most important occupants in this universe.
 */
/**
 * @typedef PropertyObjectNameCollision2
 * @property {Universe1} [universe] -
 */
/**
 * @typedef PropertySanitized
 * @property {string} `0000---terrible-property-name~!3` -
 */
/**
 * @typedef ObjectItem
 * @property {string} [name] -
 */
/**
 * @typedef SimpleArrayTypes
 * @property {string[]} [nullable] -
 * @property {number[]} [number] -
 * @property {ObjectItem[]} [object] -
 * @property {string[]} [string] -
 * @property {any[]} [any] -
 * @property {boolean[]} [boolean] -
 * @property {number[]} [integer] -
 */
/**
 * @typedef UnionType
 * @property {string | number | null} `universe_name` -
 */
/**
 * Validates that clients properly sanitize event names.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function I42TerribleEventName3(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		title: '42_--terrible==\\"event\'++name~!3',
		description: 'Validates that clients properly sanitize event names.',
	}
	const message = {
		event: '42_--terrible==\\"event\'++name~!3',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'42_--terrible==\\"event\'++name~!3',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fired before an analytics instance has been set, which should throw an error.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function analyticsInstanceMissing(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			properties: {
				type: 'object',
			},
			context: {},
			traits: {
				type: 'object',
			},
		},
		title: 'Analytics Instance Missing',
		description:
			'Fired before an analytics instance has been set, which should throw an error.',
	}
	const message = {
		event: 'Analytics Instance Missing',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Analytics Instance Missing',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fired after a client throws an "Analytics Instance Missing" error to mark the test as successful.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function analyticsInstanceMissingThrewError(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		title: 'Analytics Instance Missing Threw Error',
		description:
			'Fired after a client throws an "Analytics Instance Missing" error to mark the test as successful.',
	}
	const message = {
		event: 'Analytics Instance Missing Threw Error',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Analytics Instance Missing Threw Error',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Custom Violation Handler' track call.
 *
 * @param {CustomViolationHandler} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function customViolationHandler(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				properties: {
					'regex property': {
						description: '',
						pattern: 'Lawyer Morty|Evil Morty',
						type: 'string',
					},
				},
				required: ['regex property'],
				type: 'object',
			},
		},
		required: ['properties'],
		title: 'Custom Violation Handler',
	}
	const message = {
		event: 'Custom Violation Handler',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Custom Violation Handler',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Custom Violation Handler Called' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function customViolationHandlerCalled(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		title: 'Custom Violation Handler Called',
	}
	const message = {
		event: 'Custom Violation Handler Called',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Custom Violation Handler Called',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Default Violation Handler' track call.
 *
 * @param {DefaultViolationHandler} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function defaultViolationHandler(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			properties: {
				type: 'object',
				properties: {
					'regex property': {
						description: '',
						pattern: 'Lawyer Morty|Evil Morty',
						type: 'string',
					},
				},
				required: ['regex property'],
			},
			context: {},
			traits: {
				type: 'object',
			},
		},
		required: ['properties'],
		type: 'object',
		title: 'Default Violation Handler',
	}
	const message = {
		event: 'Default Violation Handler',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Default Violation Handler',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Default Violation Handler Called' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function defaultViolationHandlerCalled(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		type: 'object',
		labels: {},
		title: 'Default Violation Handler Called',
	}
	const message = {
		event: 'Default Violation Handler Called',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Default Violation Handler Called',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Empty Event' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function emptyEvent(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		title: 'Empty Event',
	}
	const message = {
		event: 'Empty Event',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Empty Event',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Event Collided' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function eventCollided(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		type: 'object',
		title: 'Event Collided',
	}
	const message = {
		event: 'Event Collided',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Event Collided',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Every Nullable Optional Type' track call.
 *
 * @param {EveryNullableOptionalType} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function everyNullableOptionalType(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			traits: {},
			properties: {
				type: 'object',
				properties: {
					'optional boolean': {
						description: 'Optional boolean property',
						type: ['boolean', 'null'],
					},
					'optional int': {
						description: 'Optional integer property',
						type: ['integer', 'null'],
					},
					'optional number': {
						description: 'Optional number property',
						type: ['number', 'null'],
					},
					'optional object': {
						properties: {},
						required: [],
						type: ['object', 'null'],
						description: 'Optional object property',
					},
					'optional string': {
						type: ['string', 'null'],
						description: 'Optional string property',
					},
					'optional string with regex': {
						description: 'Optional string property with a regex conditional',
						pattern: 'Evil Morty|Lawyer Morty',
						type: ['string', 'null'],
					},
					'optional any': {
						description: 'Optional any property',
					},
					'optional array': {
						description: 'Optional array property',
						type: ['array', 'null'],
					},
				},
			},
		},
		type: 'object',
		title: 'Every Nullable Optional Type',
	}
	const message = {
		event: 'Every Nullable Optional Type',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Every Nullable Optional Type',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Every Nullable Required Type' track call.
 *
 * @param {EveryNullableRequiredType} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function everyNullableRequiredType(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		properties: {
			properties: {
				type: 'object',
				properties: {
					'required any': {
						description: 'Required any property',
					},
					'required array': {
						type: ['array', 'null'],
						description: 'Required array property',
					},
					'required boolean': {
						type: ['boolean', 'null'],
						description: 'Required boolean property',
					},
					'required int': {
						type: ['integer', 'null'],
						description: 'Required integer property',
					},
					'required number': {
						description: 'Required number property',
						type: ['number', 'null'],
					},
					'required object': {
						required: [],
						type: ['object', 'null'],
						description: 'Required object property',
						properties: {},
					},
					'required string': {
						type: ['string', 'null'],
						description: 'Required string property',
					},
					'required string with regex': {
						description: 'Required string property with a regex conditional',
						pattern: 'Evil Morty|Lawyer Morty',
						type: ['string', 'null'],
					},
				},
				required: [
					'required any',
					'required array',
					'required boolean',
					'required int',
					'required number',
					'required object',
					'required string',
					'required string with regex',
				],
			},
			context: {},
			traits: {},
		},
		required: ['properties'],
		title: 'Every Nullable Required Type',
	}
	const message = {
		event: 'Every Nullable Required Type',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Every Nullable Required Type',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Every Optional Type' track call.
 *
 * @param {EveryOptionalType} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function everyOptionalType(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			traits: {},
			properties: {
				type: 'object',
				properties: {
					'optional int': {
						description: 'Optional integer property',
						type: 'integer',
					},
					'optional number': {
						description: 'Optional number property',
						type: 'number',
					},
					'optional object': {
						key: 'optional object',
						properties: {},
						required: [],
						type: 'object',
						description: 'Optional object property',
					},
					'optional string': {
						description: 'Optional string property',
						type: 'string',
					},
					'optional string with regex': {
						description: 'Optional string property with a regex conditional',
						pattern: 'Evil Morty|Lawyer Morty',
						type: 'string',
					},
					'optional any': {
						description: 'Optional any property',
					},
					'optional array': {
						description: 'Optional array property',
						type: 'array',
					},
					'optional boolean': {
						description: 'Optional boolean property',
						type: 'boolean',
					},
				},
			},
		},
		type: 'object',
		title: 'Every Optional Type',
	}
	const message = {
		event: 'Every Optional Type',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Every Optional Type',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Every Required Type' track call.
 *
 * @param {EveryRequiredType} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function everyRequiredType(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			traits: {},
			properties: {
				properties: {
					'required array': {
						description: 'Required array property',
						type: 'array',
					},
					'required boolean': {
						description: 'Required boolean property',
						type: 'boolean',
					},
					'required int': {
						type: 'integer',
						description: 'Required integer property',
					},
					'required number': {
						description: 'Required number property',
						type: 'number',
					},
					'required object': {
						key: 'required object',
						properties: {},
						required: [],
						type: 'object',
						description: 'Required object property',
					},
					'required string': {
						description: 'Required string property',
						type: 'string',
					},
					'required string with regex': {
						description: 'Required string property with a regex conditional',
						pattern: 'Evil Morty|Lawyer Morty',
						type: 'string',
					},
					'required any': {
						description: 'Required any property',
					},
				},
				required: [
					'required any',
					'required array',
					'required boolean',
					'required int',
					'required number',
					'required object',
					'required string',
					'required string with regex',
				],
				type: 'object',
			},
		},
		required: ['properties'],
		type: 'object',
		title: 'Every Required Type',
	}
	const message = {
		event: 'Every Required Type',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Every Required Type',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Nested Arrays' track call.
 *
 * @param {NestedArrays} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function nestedArrays(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		required: ['properties'],
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					universeCharacters: {
						items: {
							description: '',
							items: {
								type: 'object',
								description: '',
								properties: {
									name: {
										description: "The character's name.",
										type: 'string',
									},
								},
								required: ['name'],
							},
							type: 'array',
						},
						type: 'array',
						description: 'All known characters from each universe.',
					},
				},
				required: ['universeCharacters'],
			},
		},
		title: 'Nested Arrays',
	}
	const message = {
		event: 'Nested Arrays',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Nested Arrays',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Nested Objects' track call.
 *
 * @param {NestedObjects} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function nestedObjects(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			properties: {
				type: 'object',
				properties: {
					garage: {
						description: '',
						properties: {
							tunnel: {
								required: ['subterranean lab'],
								type: 'object',
								description: '',
								properties: {
									'subterranean lab': {
										type: 'object',
										description: '',
										properties: {
											"jerry's memories": {
												description: '',
												type: 'array',
											},
											"morty's memories": {
												type: 'array',
												description: '',
											},
											"summer's contingency plan": {
												description: '',
												type: 'string',
											},
										},
										required: [],
									},
								},
							},
						},
						required: ['tunnel'],
						type: 'object',
					},
				},
				required: ['garage'],
			},
			context: {},
			traits: {
				type: 'object',
			},
		},
		required: ['properties'],
		type: 'object',
		title: 'Nested Objects',
	}
	const message = {
		event: 'Nested Objects',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Nested Objects',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Properties Collided' track call.
 *
 * @param {PropertiesCollided} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function propertiesCollided(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		required: ['properties'],
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					'Property Collided': {
						description: '',
						type: 'string',
					},
					property_collided: {
						type: 'string',
						description: '',
					},
				},
				required: ['property_collided', 'Property Collided'],
			},
		},
		title: 'Properties Collided',
	}
	const message = {
		event: 'Properties Collided',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Properties Collided',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Property Object Name Collision #1' track call.
 *
 * @param {PropertyObjectNameCollision1} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function propertyObjectNameCollision1(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				properties: {
					universe: {
						type: 'object',
						description: '',
						properties: {
							occupants: {
								type: 'array',
								description: 'The most important occupants in this universe.',
								items: {
									properties: {
										name: {
											type: 'string',
											description: 'The name of this occupant.',
										},
									},
									required: ['name'],
									type: 'object',
									description: '',
								},
							},
							name: {
								description: 'The common name of this universe.',
								type: 'string',
							},
						},
						required: ['name', 'occupants'],
					},
				},
				type: 'object',
			},
		},
		type: 'object',
		title: 'Property Object Name Collision #1',
	}
	const message = {
		event: 'Property Object Name Collision #1',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Property Object Name Collision #1',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Property Object Name Collision #2' track call.
 *
 * @param {PropertyObjectNameCollision2} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function propertyObjectNameCollision2(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					universe: {
						required: ['name', 'occupants'],
						type: 'object',
						description: '',
						properties: {
							name: {
								type: 'string',
								description: 'The common name of this universe.',
							},
							occupants: {
								description: 'The most important occupants in this universe.',
								items: {
									description: '',
									properties: {
										name: {
											description: 'The name of this occupant.',
											type: 'string',
										},
									},
									required: ['name'],
									type: 'object',
								},
								type: 'array',
							},
						},
					},
				},
			},
		},
		title: 'Property Object Name Collision #2',
	}
	const message = {
		event: 'Property Object Name Collision #2',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Property Object Name Collision #2',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Property Sanitized' track call.
 *
 * @param {PropertySanitized} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function propertySanitized(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		required: ['properties'],
		type: 'object',
		labels: {},
		properties: {
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					'0000---terrible-property-name~!3': {
						description: '',
						type: 'string',
					},
				},
				required: ['0000---terrible-property-name~!3'],
			},
			context: {},
		},
		title: 'Property Sanitized',
	}
	const message = {
		event: 'Property Sanitized',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Property Sanitized',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Simple Array Types' track call.
 *
 * @param {SimpleArrayTypes} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function simpleArrayTypes(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					nullable: {
						description: '',
						items: {
							description: '',
							type: ['string', 'null'],
						},
						type: 'array',
					},
					number: {
						items: {
							type: 'number',
							description: '',
						},
						type: 'array',
						description: '',
					},
					object: {
						type: 'array',
						description: '',
						items: {
							required: [],
							type: 'object',
							description: '',
							properties: {
								name: {
									type: 'string',
									description: '',
								},
							},
						},
					},
					string: {
						type: 'array',
						description: '',
						items: {
							description: '',
							type: 'string',
						},
					},
					any: {
						description: '',
						items: {
							description: '',
						},
						type: 'array',
					},
					boolean: {
						description: '',
						items: {
							description: '',
							type: 'boolean',
						},
						type: 'array',
					},
					integer: {
						type: 'array',
						description: '',
						items: {
							description: '',
							type: 'integer',
						},
					},
				},
			},
		},
		type: 'object',
		title: 'Simple Array Types',
	}
	const message = {
		event: 'Simple Array Types',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Simple Array Types',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'Union Type' track call.
 *
 * @param {UnionType} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function unionType(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
				properties: {
					universe_name: {
						description: '',
						type: ['string', 'null', 'integer'],
					},
				},
				required: ['universe_name'],
			},
		},
		required: ['properties'],
		type: 'object',
		labels: {},
		title: 'Union Type',
	}
	const message = {
		event: 'Union Type',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track('Union Type', props || {}, withTypewriterContext(options), callback)
	}
}
/**
 * Fired if a client correctly handled an unknown method call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function unknownEventHandlerCalled(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		type: 'object',
		labels: {},
		properties: {
			properties: {
				type: 'object',
			},
			context: {},
			traits: {
				type: 'object',
			},
		},
		title: 'Unknown Event Handler Called',
		description: 'Fired if a client correctly handled an unknown method call.',
	}
	const message = {
		event: 'Unknown Event Handler Called',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'Unknown Event Handler Called',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
/**
 * Fires a 'event_collided' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function eventCollided1(props, options, callback) {
	const schema = {
		$schema: 'http://json-schema.org/draft-07/schema#',
		labels: {},
		properties: {
			context: {},
			traits: {
				type: 'object',
			},
			properties: {
				type: 'object',
			},
		},
		type: 'object',
		title: 'event_collided',
	}
	const message = {
		event: 'event_collided',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	const a = analytics()
	if (a) {
		a.track(
			'event_collided',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
const clientAPI = {
	/**
	 * Updates the run-time configuration of this Typewriter client.
	 *
	 * @param {TypewriterOptions} options - the options to upsert
	 *
	 * @typedef {Object} TypewriterOptions
	 * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
	 * 		calls are forwarded on to. Defaults to window.analytics.
	 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
	 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
	 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
	 * 		will be logged to stderr.
	 */
	setTypewriterOptions,
	/**
	 * Validates that clients properly sanitize event names.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	I42TerribleEventName3,
	/**
	 * Fired before an analytics instance has been set, which should throw an error.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	analyticsInstanceMissing,
	/**
	 * Fired after a client throws an "Analytics Instance Missing" error to mark the test as successful.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	analyticsInstanceMissingThrewError,
	/**
	 * Fires a 'Custom Violation Handler' track call.
	 *
	 * @param {CustomViolationHandler} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	customViolationHandler,
	/**
	 * Fires a 'Custom Violation Handler Called' track call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	customViolationHandlerCalled,
	/**
	 * Fires a 'Default Violation Handler' track call.
	 *
	 * @param {DefaultViolationHandler} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	defaultViolationHandler,
	/**
	 * Fires a 'Default Violation Handler Called' track call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	defaultViolationHandlerCalled,
	/**
	 * Fires a 'Empty Event' track call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	emptyEvent,
	/**
	 * Fires a 'Event Collided' track call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	eventCollided,
	/**
	 * Fires a 'Every Nullable Optional Type' track call.
	 *
	 * @param {EveryNullableOptionalType} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	everyNullableOptionalType,
	/**
	 * Fires a 'Every Nullable Required Type' track call.
	 *
	 * @param {EveryNullableRequiredType} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	everyNullableRequiredType,
	/**
	 * Fires a 'Every Optional Type' track call.
	 *
	 * @param {EveryOptionalType} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	everyOptionalType,
	/**
	 * Fires a 'Every Required Type' track call.
	 *
	 * @param {EveryRequiredType} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	everyRequiredType,
	/**
	 * Fires a 'Nested Arrays' track call.
	 *
	 * @param {NestedArrays} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	nestedArrays,
	/**
	 * Fires a 'Nested Objects' track call.
	 *
	 * @param {NestedObjects} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	nestedObjects,
	/**
	 * Fires a 'Properties Collided' track call.
	 *
	 * @param {PropertiesCollided} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	propertiesCollided,
	/**
	 * Fires a 'Property Object Name Collision #1' track call.
	 *
	 * @param {PropertyObjectNameCollision1} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	propertyObjectNameCollision1,
	/**
	 * Fires a 'Property Object Name Collision #2' track call.
	 *
	 * @param {PropertyObjectNameCollision2} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	propertyObjectNameCollision2,
	/**
	 * Fires a 'Property Sanitized' track call.
	 *
	 * @param {PropertySanitized} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	propertySanitized,
	/**
	 * Fires a 'Simple Array Types' track call.
	 *
	 * @param {SimpleArrayTypes} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	simpleArrayTypes,
	/**
	 * Fires a 'Union Type' track call.
	 *
	 * @param {UnionType} props - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	unionType,
	/**
	 * Fired if a client correctly handled an unknown method call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	unknownEventHandlerCalled,
	/**
	 * Fires a 'event_collided' track call.
	 *
	 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
	 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
	 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
	 * 		call is fired.
	 */
	eventCollided1,
}
export default new Proxy(clientAPI, {
	get(target, method) {
		if (typeof method === 'string' && target.hasOwnProperty(method)) {
			return target[method]
		}
		return () => {
			console.warn(`⚠️  You made an analytics call (${String(
				method
			)}) that can't be found. Either:
    a) Re-generate your typewriter client: \`npm run typewriter\`
    b) Add it to your Tracking Plan: https://app.segment.com/TODO/tracking-plans/TODO`)
			const a = analytics()
			if (a) {
				a.track('Unknown Analytics Call Fired', {
					method,
				})
			}
		}
	},
})
